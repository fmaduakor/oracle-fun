"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var compiler_1 = require("./utils/compiler");
var solc_wrapper_1 = require("./solc_wrapper");
// Solc compiler settings cannot be configured from the commandline.
// If you need this configured, please create a `compiler.json` config file
// with your desired configurations.
exports.DEFAULT_COMPILER_SETTINGS = {
    optimizer: {
        enabled: false,
    },
    outputSelection: {
        '*': {
            '*': ['abi', 'evm.bytecode.object'],
        },
    },
};
// tslint:disable no-non-null-assertion
var SolcWrapperV05 = /** @class */ (function (_super) {
    __extends(SolcWrapperV05, _super);
    function SolcWrapperV05(_solcVersion, _opts) {
        var _this = _super.call(this) || this;
        _this._solcVersion = _solcVersion;
        _this._opts = _opts;
        _this._compilerSettings = __assign({}, exports.DEFAULT_COMPILER_SETTINGS, _opts.compilerSettings);
        return _this;
    }
    Object.defineProperty(SolcWrapperV05.prototype, "version", {
        get: function () {
            return this._solcVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SolcWrapperV05.prototype, "solidityVersion", {
        get: function () {
            return compiler_1.getSolidityVersionFromSolcVersion(this._solcVersion);
        },
        enumerable: true,
        configurable: true
    });
    SolcWrapperV05.prototype.areCompilerSettingsDifferent = function (settings) {
        return !_.isEqual(_.omit(settings, 'remappings'), _.omit(this._compilerSettings, 'remappings'));
    };
    SolcWrapperV05.prototype.compileAsync = function (contractsByPath, importRemappings) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, e_2, _b, input, _c, _d, _e, contractPath, contractContent, _f, _g, _h, prefix, _path, output;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        input = {
                            language: 'Solidity',
                            sources: {},
                            settings: __assign({ remappings: [] }, this._compilerSettings),
                        };
                        try {
                            for (_c = __values(Object.entries(contractsByPath)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                _e = __read(_d.value, 2), contractPath = _e[0], contractContent = _e[1];
                                input.sources[contractPath] = { content: contractContent };
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        try {
                            for (_f = __values(Object.entries(importRemappings)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                _h = __read(_g.value, 2), prefix = _h[0], _path = _h[1];
                                input.settings.remappings.push(prefix + "=" + _path);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        return [4 /*yield*/, this._compileInputAsync(input)];
                    case 1:
                        output = _j.sent();
                        if (output.errors !== undefined) {
                            compiler_1.printCompilationErrorsAndWarnings(output.errors);
                        }
                        return [2 /*return*/, {
                                input: input,
                                output: this._normalizeOutput(output),
                            }];
                }
            });
        });
    };
    SolcWrapperV05.prototype._compileInputAsync = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var solcInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._opts.useDockerisedSolc) {
                            return [2 /*return*/, compiler_1.compileDockerAsync(this.solidityVersion, input)];
                        }
                        return [4 /*yield*/, compiler_1.getSolcJSAsync(this.solidityVersion, !!this._opts.isOfflineMode)];
                    case 1:
                        solcInstance = _a.sent();
                        return [2 /*return*/, compiler_1.compileSolcJSAsync(solcInstance, input)];
                }
            });
        });
    };
    // tslint:disable-next-line: prefer-function-over-method
    SolcWrapperV05.prototype._normalizeOutput = function (output) {
        var e_3, _a;
        var _output = _.cloneDeep(output);
        // tslint:disable-next-line forin
        for (var contractPath in _output.contracts) {
            try {
                for (var _b = __values(Object.values(_output.contracts[contractPath])), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var contract = _c.value;
                    compiler_1.addHexPrefixToContractBytecode(contract);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return _output;
    };
    return SolcWrapperV05;
}(solc_wrapper_1.SolcWrapper));
exports.SolcWrapperV05 = SolcWrapperV05;
//# sourceMappingURL=solc_wrapper_v05.js.map