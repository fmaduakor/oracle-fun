"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("@0x/assert");
var sol_resolver_1 = require("@0x/sol-resolver");
var utils_1 = require("@0x/utils");
var chokidar = require("chokidar");
var fs = require("fs");
var _ = require("lodash");
var path = require("path");
var pluralize = require("pluralize");
var semver = require("semver");
var util_1 = require("util");
var compiler_options_schema_1 = require("./schemas/compiler_options_schema");
var compiler_1 = require("./utils/compiler");
var constants_1 = require("./utils/constants");
var fs_wrapper_1 = require("./utils/fs_wrapper");
var utils_2 = require("./utils/utils");
var solc_wrapper_v04_1 = require("./solc_wrapper_v04");
var solc_wrapper_v05_1 = require("./solc_wrapper_v05");
var solc_wrapper_v06_1 = require("./solc_wrapper_v06");
exports.ALL_CONTRACTS_IDENTIFIER = '*';
exports.ALL_FILES_IDENTIFIER = '*';
var DEFAULT_COMPILER_OPTS = {
    contractsDir: path.resolve('contracts'),
    artifactsDir: path.resolve('artifacts'),
    contracts: exports.ALL_CONTRACTS_IDENTIFIER,
    useDockerisedSolc: false,
    isOfflineMode: false,
    shouldSaveStandardInput: false,
};
// tslint:disable no-non-null-assertion
/**
 * The Compiler facilitates compiling Solidity smart contracts and saves the results
 * to artifact files.
 */
var Compiler = /** @class */ (function () {
    /**
     * Instantiates a new instance of the Compiler class.
     * @param opts Optional compiler options
     * @return An instance of the Compiler class.
     */
    function Compiler(opts) {
        if (opts === void 0) { opts = {}; }
        this._solcWrappersByVersion = {};
        this._opts = __assign({}, DEFAULT_COMPILER_OPTS, opts);
        assert_1.assert.doesConformToSchema('opts', this._opts, compiler_options_schema_1.compilerOptionsSchema);
        this._contractsDir = path.resolve(this._opts.contractsDir);
        this._solcVersionIfExists =
            process.env.SOLCJS_PATH !== undefined
                ? compiler_1.getSolcJSVersionFromPath(process.env.SOLCJS_PATH)
                : this._opts.solcVersion;
        this._artifactsDir = this._opts.artifactsDir;
        this._specifiedContracts = this._opts.contracts;
        this._isOfflineMode = this._opts.isOfflineMode;
        this._shouldSaveStandardInput = this._opts.shouldSaveStandardInput;
        this._nameResolver = new sol_resolver_1.NameResolver(this._contractsDir);
        this._resolver = Compiler._createDefaultResolver(this._contractsDir, this._nameResolver);
    }
    Compiler.getCompilerOptionsAsync = function (overrides, file) {
        if (overrides === void 0) { overrides = {}; }
        if (file === void 0) { file = 'compiler.json'; }
        return __awaiter(this, void 0, void 0, function () {
            var fileConfig, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, util_1.promisify(fs.stat)(file)];
                    case 1:
                        if (!(_d.sent()).isFile) return [3 /*break*/, 3];
                        _c = (_b = JSON).parse;
                        return [4 /*yield*/, util_1.promisify(fs.readFile)(file, 'utf8')];
                    case 2:
                        _a = _c.apply(_b, [(_d.sent()).toString()]);
                        return [3 /*break*/, 4];
                    case 3:
                        _a = {};
                        _d.label = 4;
                    case 4:
                        fileConfig = _a;
                        assert_1.assert.doesConformToSchema('compiler.json', fileConfig, compiler_options_schema_1.compilerOptionsSchema);
                        return [2 /*return*/, __assign({}, fileConfig, overrides)];
                }
            });
        });
    };
    Compiler._createDefaultResolver = function (contractsDir) {
        // tslint:disable-next-line: trailing-comma
        var appendedResolvers = [];
        for (
        // tslint:disable-next-line: trailing-comma
        var _i = 1; 
        // tslint:disable-next-line: trailing-comma
        _i < arguments.length; 
        // tslint:disable-next-line: trailing-comma
        _i++) {
            // tslint:disable-next-line: trailing-comma
            appendedResolvers[_i - 1] = arguments[_i];
        }
        var e_1, _a;
        var resolver = new sol_resolver_1.FallthroughResolver();
        resolver.appendResolver(new sol_resolver_1.URLResolver());
        resolver.appendResolver(new sol_resolver_1.NPMResolver(contractsDir));
        resolver.appendResolver(new sol_resolver_1.RelativeFSResolver(contractsDir));
        resolver.appendResolver(new sol_resolver_1.FSResolver());
        try {
            for (var appendedResolvers_1 = __values(appendedResolvers), appendedResolvers_1_1 = appendedResolvers_1.next(); !appendedResolvers_1_1.done; appendedResolvers_1_1 = appendedResolvers_1.next()) {
                var appendedResolver = appendedResolvers_1_1.value;
                resolver.appendResolver(appendedResolver);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (appendedResolvers_1_1 && !appendedResolvers_1_1.done && (_a = appendedResolvers_1.return)) _a.call(appendedResolvers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return resolver;
    };
    /**
     * Compiles selected Solidity files found in `contractsDir` and writes JSON artifacts to `artifactsDir`.
     */
    Compiler.prototype.compileAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, compiler_1.createDirIfDoesNotExistAsync(this._artifactsDir)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, compiler_1.createDirIfDoesNotExistAsync(constants_1.constants.SOLC_BIN_DIR)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._compileContractsAsync(this.getContractNamesToCompile(), true)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Compiles Solidity files specified during instantiation, and returns the
     * compiler output given by solc.  Return value is an array of outputs:
     * Solidity modules are batched together by version required, and each
     * element of the returned array corresponds to a compiler version, and
     * each element contains the output for all of the modules compiled with
     * that version.
     */
    Compiler.prototype.getCompilerOutputsAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var promisedOutputs;
            return __generator(this, function (_a) {
                promisedOutputs = this._compileContractsAsync(this.getContractNamesToCompile(), false);
                return [2 /*return*/, promisedOutputs];
            });
        });
    };
    /**
     * Watch contracts in the current project directory and recompile on changes.
     */
    Compiler.prototype.watchAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var MATCH_NOTHING_REGEX, IGNORE_DOT_FILES_REGEX, watcher, onFileChangedAsync;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.clear(); // tslint:disable-line:no-console
                        utils_1.logUtils.logWithTime('Starting compilation in watch mode...');
                        MATCH_NOTHING_REGEX = '^$';
                        IGNORE_DOT_FILES_REGEX = /(^|[\/\\])\../;
                        watcher = chokidar.watch(MATCH_NOTHING_REGEX, { ignored: IGNORE_DOT_FILES_REGEX });
                        onFileChangedAsync = function () { return __awaiter(_this, void 0, void 0, function () {
                            var err_1, pathsToWatch;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        watcher.unwatch('*'); // Stop watching
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this.compileAsync()];
                                    case 2:
                                        _a.sent();
                                        utils_1.logUtils.logWithTime('Found 0 errors. Watching for file changes.');
                                        return [3 /*break*/, 4];
                                    case 3:
                                        err_1 = _a.sent();
                                        if (err_1.typeName === 'CompilationError') {
                                            utils_1.logUtils.logWithTime("Found " + err_1.errorsCount + " " + pluralize('error', err_1.errorsCount) + ". Watching for file changes.");
                                        }
                                        else {
                                            utils_1.logUtils.logWithTime('Found errors. Watching for file changes.');
                                        }
                                        return [3 /*break*/, 4];
                                    case 4:
                                        pathsToWatch = this._getPathsToWatch();
                                        watcher.add(pathsToWatch);
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, onFileChangedAsync()];
                    case 1:
                        _a.sent();
                        watcher.on('change', function () {
                            console.clear(); // tslint:disable-line:no-console
                            utils_1.logUtils.logWithTime('File change detected. Starting incremental compilation...');
                            // NOTE: We can't await it here because that's a callback.
                            // Instead we stop watching inside of it and start it again when we're finished.
                            onFileChangedAsync(); // tslint:disable-line no-floating-promises
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets a list of contracts to compile.
     */
    Compiler.prototype.getContractNamesToCompile = function () {
        var contractNamesToCompile;
        if (this._specifiedContracts === exports.ALL_CONTRACTS_IDENTIFIER) {
            var allContracts = this._nameResolver.getAll();
            contractNamesToCompile = _.map(allContracts, function (contractSource) {
                return path.basename(contractSource.path, constants_1.constants.SOLIDITY_FILE_EXTENSION);
            });
        }
        else {
            return this._specifiedContracts;
        }
        return contractNamesToCompile;
    };
    Compiler.prototype._getPathsToWatch = function () {
        var e_2, _a;
        var contractNames = this.getContractNamesToCompile();
        var spyResolver = new sol_resolver_1.SpyResolver(this._resolver);
        try {
            for (var contractNames_1 = __values(contractNames), contractNames_1_1 = contractNames_1.next(); !contractNames_1_1.done; contractNames_1_1 = contractNames_1.next()) {
                var contractName = contractNames_1_1.value;
                var contractSource = spyResolver.resolve(contractName);
                // NOTE: We ignore the return value here. We don't want to compute the source tree hash.
                // We just want to call a SpyResolver on each contracts and it's dependencies and
                // this is a convenient way to reuse the existing code that does that.
                // We can then get all the relevant paths from the `spyResolver` below.
                compiler_1.getSourceTreeHash(spyResolver, contractSource.path);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (contractNames_1_1 && !contractNames_1_1.done && (_a = contractNames_1.return)) _a.call(contractNames_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var pathsToWatch = _.uniq(spyResolver.resolvedContractSources.map(function (cs) { return cs.absolutePath; }));
        return pathsToWatch;
    };
    /**
     * Compiles contracts, and, if `shouldPersist` is true, saves artifacts to artifactsDir.
     * @param fileName Name of contract with '.sol' extension.
     * @return an array of compiler outputs, where each element corresponds to a different version of solc-js.
     */
    Compiler.prototype._compileContractsAsync = function (contractNames, shouldPersist) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3, _a, e_4, _b, contractsByVersion, contractPathToData, solcJSReleases, resolvedContractSources, contractNames_2, contractNames_2_1, contractName, spyResolver, contractSource, sourceTreeHashHex, contractData, _c, solcVersion, solidityVersion, _d, _e, resolvedContractSource, e_3_1, importRemappings, versions, compilationResults;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        contractsByVersion = {};
                        contractPathToData = {};
                        return [4 /*yield*/, compiler_1.getSolcJSReleasesAsync(this._isOfflineMode)];
                    case 1:
                        solcJSReleases = _f.sent();
                        resolvedContractSources = [];
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 9]);
                        contractNames_2 = __values(contractNames), contractNames_2_1 = contractNames_2.next();
                        _f.label = 3;
                    case 3:
                        if (!!contractNames_2_1.done) return [3 /*break*/, 6];
                        contractName = contractNames_2_1.value;
                        spyResolver = new sol_resolver_1.SpyResolver(this._resolver);
                        contractSource = spyResolver.resolve(contractName);
                        sourceTreeHashHex = compiler_1.getSourceTreeHash(spyResolver, contractSource.path).toString('hex');
                        _c = {
                            contractName: path.basename(contractName, constants_1.constants.SOLIDITY_FILE_EXTENSION)
                        };
                        return [4 /*yield*/, compiler_1.getContractArtifactIfExistsAsync(this._artifactsDir, contractName)];
                    case 4:
                        contractData = (_c.currentArtifactIfExists = _f.sent(),
                            _c.sourceTreeHashHex = "0x" + sourceTreeHashHex,
                            _c);
                        if (!this._shouldCompile(contractData)) {
                            return [3 /*break*/, 5];
                        }
                        contractPathToData[contractSource.absolutePath] = contractData;
                        solcVersion = void 0;
                        if (this._solcVersionIfExists) {
                            solcVersion = this._solcVersionIfExists;
                        }
                        else {
                            solidityVersion = semver.maxSatisfying(_.keys(solcJSReleases), compiler_1.parseSolidityVersionRange(contractSource.source));
                            if (solidityVersion) {
                                solcVersion = compiler_1.normalizeSolcVersion(solcJSReleases[solidityVersion]);
                            }
                        }
                        if (solcVersion === undefined) {
                            throw new Error("Couldn't find any solidity version satisfying the constraint " + compiler_1.parseSolidityVersionRange(contractSource.source));
                        }
                        try {
                            // add input to the right version batch
                            for (_d = __values(spyResolver.resolvedContractSources), _e = _d.next(); !_e.done; _e = _d.next()) {
                                resolvedContractSource = _e.value;
                                contractsByVersion[solcVersion] = contractsByVersion[solcVersion] || {};
                                contractsByVersion[solcVersion][resolvedContractSource.absolutePath] = resolvedContractSource.source;
                                resolvedContractSources.push(resolvedContractSource);
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        _f.label = 5;
                    case 5:
                        contractNames_2_1 = contractNames_2.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_3_1 = _f.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (contractNames_2_1 && !contractNames_2_1.done && (_a = contractNames_2.return)) _a.call(contractNames_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        importRemappings = compiler_1.getDependencyNameToPackagePath(resolvedContractSources);
                        versions = Object.keys(contractsByVersion);
                        return [4 /*yield*/, Promise.all(versions.map(function (solcVersion) { return __awaiter(_this, void 0, void 0, function () {
                                var contracts;
                                return __generator(this, function (_a) {
                                    contracts = contractsByVersion[solcVersion];
                                    utils_1.logUtils.warn("Compiling " + Object.keys(contracts).length + " contracts (" + Object.keys(contracts).map(function (p) {
                                        return path.basename(p);
                                    }) + ") with Solidity " + solcVersion + "...");
                                    return [2 /*return*/, this._getSolcWrapperForVersion(solcVersion).compileAsync(contracts, importRemappings)];
                                });
                            }); }))];
                    case 10:
                        compilationResults = _f.sent();
                        if (!shouldPersist) return [3 /*break*/, 12];
                        return [4 /*yield*/, Promise.all(versions.map(function (solcVersion, i) { return __awaiter(_this, void 0, void 0, function () {
                                var compilationResult, contracts;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            compilationResult = compilationResults[i];
                                            contracts = contractsByVersion[solcVersion];
                                            // tslint:disable-next-line: forin
                                            return [4 /*yield*/, Promise.all(Object.keys(contracts).map(function (contractPath) { return __awaiter(_this, void 0, void 0, function () {
                                                    var contractData, contractName, compiledContract;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                contractData = contractPathToData[contractPath];
                                                                if (contractData === undefined) {
                                                                    return [2 /*return*/];
                                                                }
                                                                contractName = contractData.contractName;
                                                                compiledContract = compilationResult.output.contracts[contractPath][contractName];
                                                                if (compiledContract === undefined) {
                                                                    throw new Error("Contract " + contractName + " not found in " + contractPath + ". Please make sure your contract has the same name as it's file name");
                                                                }
                                                                return [4 /*yield*/, this._persistCompiledContractAsync(contractPath, contractPathToData[contractPath].currentArtifactIfExists, contractPathToData[contractPath].sourceTreeHashHex, contractName, solcVersion, contracts, compilationResult.input, compilationResult.output, importRemappings)];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 1:
                                            // tslint:disable-next-line: forin
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 11:
                        _f.sent();
                        _f.label = 12;
                    case 12: return [2 /*return*/, compilationResults.map(function (r) { return r.output; })];
                }
            });
        });
    };
    Compiler.prototype._shouldCompile = function (contractData) {
        if (contractData.currentArtifactIfExists === undefined) {
            return true;
        }
        else {
            var currentArtifact = contractData.currentArtifactIfExists;
            var solc = this._getSolcWrapperForVersion(currentArtifact.compiler.version);
            var isUserOnLatestVersion = currentArtifact.schemaVersion === constants_1.constants.LATEST_ARTIFACT_VERSION;
            var didCompilerSettingsChange = solc.areCompilerSettingsDifferent(currentArtifact.compiler.settings);
            var didSourceChange = currentArtifact.sourceTreeHashHex !== contractData.sourceTreeHashHex;
            return !isUserOnLatestVersion || didCompilerSettingsChange || didSourceChange;
        }
    };
    Compiler.prototype._getSolcWrapperForVersion = function (solcVersion) {
        var normalizedVersion = compiler_1.normalizeSolcVersion(solcVersion);
        return (this._solcWrappersByVersion[normalizedVersion] ||
            (this._solcWrappersByVersion[normalizedVersion] = this._createSolcInstance(normalizedVersion)));
    };
    Compiler.prototype._createSolcInstance = function (solcVersion) {
        if (solcVersion.startsWith('0.4.')) {
            return new solc_wrapper_v04_1.SolcWrapperV04(solcVersion, this._opts);
        }
        if (solcVersion.startsWith('0.5.')) {
            return new solc_wrapper_v05_1.SolcWrapperV05(solcVersion, this._opts);
        }
        if (solcVersion.startsWith('0.6')) {
            return new solc_wrapper_v06_1.SolcWrapperV06(solcVersion, this._opts);
        }
        throw new Error("Missing Solc wrapper implementation for version " + solcVersion);
    };
    Compiler.prototype._persistCompiledContractAsync = function (contractPath, currentArtifactIfExists, sourceTreeHashHex, contractName, solcVersion, sourcesByPath, compilerInput, compilerOutput, importRemappings) {
        return __awaiter(this, void 0, void 0, function () {
            var compiledContract, allSources, sourceContractPath, content, id, usedSources, contractVersion, newArtifact, currentArtifact, artifactString, currentArtifactPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        compiledContract = compilerOutput.contracts[contractPath][contractName];
                        allSources = {};
                        // tslint:disable-next-line: forin
                        for (sourceContractPath in sourcesByPath) {
                            content = sourcesByPath[sourceContractPath];
                            id = compilerOutput.sources[sourceContractPath].id;
                            allSources[sourceContractPath] = { id: id, content: content };
                        }
                        usedSources = compiler_1.getSourcesWithDependencies(contractPath, allSources, importRemappings);
                        contractVersion = {
                            compilerOutput: compiledContract,
                            sourceTreeHashHex: sourceTreeHashHex,
                            sources: _.mapValues(usedSources, function (_a) {
                                var id = _a.id;
                                return ({ id: id });
                            }),
                            sourceCodes: _.mapValues(usedSources, function (_a) {
                                var content = _a.content;
                                return content;
                            }),
                            compiler: {
                                name: 'solc',
                                version: solcVersion,
                                settings: compilerInput.settings,
                            },
                        };
                        if (currentArtifactIfExists !== undefined) {
                            currentArtifact = currentArtifactIfExists;
                            newArtifact = __assign({}, currentArtifact, contractVersion);
                        }
                        else {
                            newArtifact = __assign({ schemaVersion: constants_1.constants.LATEST_ARTIFACT_VERSION, contractName: contractName }, contractVersion, { chains: {} });
                        }
                        artifactString = utils_2.utils.stringifyWithFormatting(newArtifact);
                        currentArtifactPath = this._artifactsDir + "/" + contractName + ".json";
                        return [4 /*yield*/, fs_wrapper_1.fsWrapper.writeFileAsync(currentArtifactPath, artifactString)];
                    case 1:
                        _a.sent();
                        utils_1.logUtils.warn(contractName + " artifact saved!");
                        if (!this._shouldSaveStandardInput) return [3 /*break*/, 3];
                        return [4 /*yield*/, fs_wrapper_1.fsWrapper.writeFileAsync(this._artifactsDir + "/" + contractName + ".input.json", utils_2.utils.stringifyWithFormatting(__assign({}, compilerInput, { 
                                // Insert solcVersion into input.
                                settings: __assign({}, compilerInput.settings, { version: solcVersion }) })))];
                    case 2:
                        _a.sent();
                        utils_1.logUtils.warn(contractName + " input artifact saved!");
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Compiler;
}());
exports.Compiler = Compiler;
//# sourceMappingURL=compiler.js.map